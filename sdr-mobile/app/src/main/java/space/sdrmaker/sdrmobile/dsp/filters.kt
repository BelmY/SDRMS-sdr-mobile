package space.sdrmaker.sdrmobile.dsp

val NOAA_TAPS = floatArrayOf(
    -7.383784e-03f,
    -3.183046e-03f, 2.255039e-03f, 7.461166e-03f, 1.091908e-02f,
    1.149109e-02f, 8.769802e-03f, 3.252932e-03f, -3.720606e-03f,
    -1.027446e-02f, -1.447403e-02f, -1.486427e-02f, -1.092423e-02f,
    -3.307958e-03f, 6.212477e-03f, 1.511364e-02f, 2.072873e-02f,
    2.096037e-02f, 1.492345e-02f, 3.347624e-03f, -1.138407e-02f,
    -2.560252e-02f, -3.507114e-02f, -3.591225e-02f, -2.553830e-02f,
    -3.371569e-03f, 2.882645e-02f, 6.711368e-02f, 1.060042e-01f,
    1.394643e-01f, 1.620650e-01f, 1.700462e-01f, 1.620650e-01f,
    1.394643e-01f, 1.060042e-01f, 6.711368e-02f, 2.882645e-02f,
    -3.371569e-03f, -2.553830e-02f, -3.591225e-02f, -3.507114e-02f,
    -2.560252e-02f, -1.138407e-02f, 3.347624e-03f, 1.492345e-02f,
    2.096037e-02f, 2.072873e-02f, 1.511364e-02f, 6.212477e-03f,
    -3.307958e-03f, -1.092423e-02f, -1.486427e-02f, -1.447403e-02f,
    -1.027446e-02f, -3.720606e-03f, 3.252932e-03f, 8.769802e-03f,
    1.149109e-02f, 1.091908e-02f, 7.461166e-03f, 2.255039e-03f,
    -3.183046e-03f, -7.383784e-03f
)

val FM_TAPS = floatArrayOf(
    0.04569721334034695f,
    -0.0014984279723340673f,
    0.11503570009461829f,
    -0.10199147438866914f,
    0.2008203889520777f,
    -0.3258053682622002f,
    0.44703675904735474f,
    -0.6630057483154398f,
    0.9487460954814383f,
    -1.2845363633197984f,
    1.7465931430974069f,
    -2.3411039573838255f,
    3.0510179136086815f,
    -3.9442181405341294f,
    5.051015302163319f,
    -6.356317517103702f,
    7.920049984543817f,
    -9.791839751011734f,
    11.957929834381758f,
    -14.46549679808007f,
    17.377101419515782f,
    -20.67894757431064f,
    24.397659439879813f,
    -28.600253940135733f,
    33.27073294311891f,
    -38.40633471755184f,
    44.06839736787468f,
    -50.236469774059174f,
    56.87104242036442f,
    -64.01644485597906f,
    71.64755432912143f,
    -79.68363099230835f,
    88.14142908472839f,
    -96.99429889882619f,
    106.12008345947294f,
    -115.5005827849022f,
    125.1133916142939f,
    -134.80259220473252f,
    144.50893315607334f,
    -154.22535078380292f,
    163.7762584615264f,
    -173.0573851377706f,
    182.09135675666698f,
    -190.7054475823649f,
    198.74360100815912f,
    -206.27570685927355f,
    213.16556359748f,
    -219.1847023081026f,
    224.4707616905682f,
    -228.98862775485046f,
    232.35830435878492f,
    -234.79499459394734f,
    236.7263281942179f,
    -236.5752462675513f,
    236.7263281942179f,
    -234.79499459394734f,
    232.35830435878492f,
    -228.98862775485046f,
    224.4707616905682f,
    -219.1847023081026f,
    213.16556359748f,
    -206.27570685927355f,
    198.74360100815912f,
    -190.7054475823649f,
    182.09135675666698f,
    -173.0573851377706f,
    163.7762584615264f,
    -154.22535078380292f,
    144.50893315607334f,
    -134.80259220473252f,
    125.1133916142939f,
    -115.5005827849022f,
    106.12008345947294f,
    -96.99429889882619f,
    88.14142908472839f,
    -79.68363099230835f,
    71.64755432912143f,
    -64.01644485597906f,
    56.87104242036442f,
    -50.236469774059174f,
    44.06839736787468f,
    -38.40633471755184f,
    33.27073294311891f,
    -28.600253940135733f,
    24.397659439879813f,
    -20.67894757431064f,
    17.377101419515782f,
    -14.46549679808007f,
    11.957929834381758f,
    -9.791839751011734f,
    7.920049984543817f,
    -6.356317517103702f,
    5.051015302163319f,
    -3.9442181405341294f,
    3.0510179136086815f,
    -2.3411039573838255f,
    1.7465931430974069f,
    -1.2845363633197984f,
    0.9487460954814383f,
    -0.6630057483154398f,
    0.44703675904735474f,
    -0.3258053682622002f,
    0.2008203889520777f,
    -0.10199147438866914f,
    0.11503570009461829f,
    -0.0014984279723340673f,
    0.04569721334034695f
)

val FM_TAPS_2 = floatArrayOf(
    -0.0009174668230116367f,
    0.0004714197129942477f,
    0.0018038529669865966f,
    0.0012254401808604598f,
    -0.0019195646746084094f,
    -0.004480223637074232f,
    -0.0015121476026251912f,
    0.006301297340542078f,
    0.009455546736717224f,
    -0.00038574900827370584f,
    -0.01580973155796528f,
    -0.016016853973269463f,
    0.008181950077414513f,
    0.03377588465809822f,
    0.022670598700642586f,
    -0.030368395149707794f,
    -0.07171222567558289f,
    -0.027632232755422592f,
    0.11805921047925949f,
    0.2874653935432434f,
    0.36268800497055054f,
    0.2874653935432434f,
    0.11805921047925949f,
    -0.027632232755422592f,
    -0.07171222567558289f,
    -0.030368395149707794f,
    0.022670598700642586f,
    0.03377588465809822f,
    0.008181950077414513f,
    -0.016016853973269463f,
    -0.01580973155796528f,
    -0.00038574900827370584f,
    0.009455546736717224f,
    0.006301297340542078f,
    -0.0015121476026251912f,
    -0.004480223637074232f,
    -0.0019195646746084094f,
    0.0012254401808604598f,
    0.0018038529669865966f,
    0.0004714197129942477f,
    -0.0009174668230116367f
)

val AUDIO_TAPS = floatArrayOf(
    -2.1026537455615113e-10f,
    -4.456930582819041e-06f,
    -2.4047219540079823e-06f,
    5.243866326054558e-05f,
    -0.00015256620827130973f,
    0.00025941358762793243f,
    -0.0002803144452627748f,
    0.00011062905832659453f,
    0.00030021709972061217f,
    -0.0008810955914668739f,
    0.0014093166682869196f,
    -0.001553630456328392f,
    0.0010001695482060313f,
    0.00036914978409186006f,
    -0.0023170425556600094f,
    0.004201103467494249f,
    -0.005105476826429367f,
    0.0041625783778727055f,
    -0.0009831939823925495f,
    -0.003969075623899698f,
    0.0092548169195652f,
    -0.012733039446175098f,
    0.012245085090398788f,
    -0.006540898699313402f,
    -0.0038774218410253525f,
    0.016380062326788902f,
    -0.026598434895277023f,
    0.029639381915330887f,
    -0.02186792530119419f,
    0.002715057460591197f,
    0.02416585385799408f,
    -0.050968851894140244f,
    0.06726731359958649f,
    -0.0627593845129013f,
    0.030509423464536667f,
    0.030310358852148056f,
    -0.11313558369874954f,
    0.20476587116718292f,
    -0.28813526034355164f,
    0.3464210629463196f,
    1.6326535940170288f,
    0.3464210629463196f,
    -0.28813526034355164f,
    0.20476587116718292f,
    -0.11313559114933014f,
    0.030310360714793205f,
    0.030509425327181816f,
    -0.06275937706232071f,
    0.06726729869842529f,
    -0.050968851894140244f,
    0.02416585385799408f,
    0.0027150569949299097f,
    -0.021867923438549042f,
    0.029639391228556633f,
    -0.026598434895277023f,
    0.0163800660520792f,
    -0.00387742230668664f,
    -0.006540900096297264f,
    0.012245086021721363f,
    -0.012733039446175098f,
    0.009254815988242626f,
    -0.003969075623899698f,
    -0.0009831939823925495f,
    0.004162577912211418f,
    -0.005105475429445505f,
    0.004201102070510387f,
    -0.0023170418571680784f,
    0.0003691494930535555f,
    0.0010001701302826405f,
    -0.0015536310384050012f,
    0.0014093174831941724f,
    -0.0008810957660898566f,
    0.00030021724523976445f,
    0.00011062901467084885f,
    -0.0002803144452627748f,
    0.0002594131219666451f,
    -0.00015256620827130973f,
    5.243866326054558e-05f,
    -2.4047219540079823e-06f,
    -4.4566918404598255e-06f,
    -2.1026537455615113e-10f
)

val FM_882k_BLACKMAN = floatArrayOf(
    4.2740247452321967e-10f,
    8.672424155520275e-05f,
    0.0005919919349253178f,
    -0.0005498044192790985f,
    -0.0034673246555030346f,
    0.00023002238594926894f,
    0.010889561846852303f,
    0.0044597722589969635f,
    -0.02489580400288105f,
    -0.02103954367339611f,
    0.04522930458188057f,
    0.06329358369112015f,
    -0.06790119409561157f,
    -0.16649243235588074f,
    0.08602391183376312f,
    0.6199969053268433f,
    0.9070885181427002f,
    0.6199969053268433f,
    0.08602391928434372f,
    -0.16649241745471954f,
    -0.06790119409561157f,
    0.06329360604286194f,
    0.045229312032461166f,
    -0.02103954367339611f,
    -0.02489580027759075f,
    0.004459771793335676f,
    0.010889558121562004f,
    0.00023002250236459076f,
    -0.003467326518148184f,
    -0.0005498043028637767f,
    0.0005919908871874213f,
    8.672387048136443e-05f,
    4.2740247452321967e-10f
)

class OldFIRFilter(private val input: Iterator<Float>, private val coefs: FloatArray) :
    Iterator<Float> {
    private val length: Int = coefs.size
    private val delayLine = FloatArray(length)
    private var count = 0

    override fun next(): Float {
        val inputSample = input.next()
        delayLine[count] = inputSample
        var result = 0.0F
        var index = count
        for (i in 0 until length) {
            result += coefs[i] * delayLine[index--]
            if (index < 0) index = length - 1
        }
        if (++count >= length) count = 0
        return result
    }

    override fun hasNext() = input.hasNext()
}

class FIRFilter(private val input: Iterator<FloatArray>, private val coefs: FloatArray) :
    Iterator<FloatArray> {
    private val length: Int = coefs.size
    private val delayLine = FloatArray(length)
    private var count = 0

    override fun next(): FloatArray {
        val nextArray = input.next()
        var result = FloatArray(nextArray.size) { 0f }
        nextArray.forEachIndexed { arrayIndex, value ->
            run {
                delayLine[count] = value
                var index = count
                for (i in 0 until length) {
                    result[arrayIndex] += coefs[i] * delayLine[index--]
                    if (index < 0) index = length - 1
                }
                if (++count >= length) count = 0
            }
        }
        return result
    }

    override fun hasNext() = input.hasNext()
}

class OldComplexFIRFilter(
    private val input: Iterator<Pair<Float, Float>>,
    private val coefs: FloatArray
) : Iterator<Pair<Float, Float>> {
    private val length: Int = coefs.size
    private val reDelayLine = FloatArray(length)
    private val imDelayLine = FloatArray(length)
    private var count = 0

    override fun next(): Pair<Float, Float> {
        val inputSample = input.next()
        reDelayLine[count] = inputSample.first
        imDelayLine[count] = inputSample.second
        var reResult = 0f
        var imResult = 0f
        var index = count
        for (i in 0 until length) {
            reResult += coefs[i] * reDelayLine[index]
            imResult += coefs[i] * imDelayLine[index]
            index--
            if (index < 0) index = length - 1
        }
        if (++count >= length) count = 0
        return Pair(reResult, imResult)
    }

    override fun hasNext() = input.hasNext()
}

class ComplexFIRFilter(
    private val input: Iterator<FloatArray>,
    private val coefs: FloatArray
) : Iterator<FloatArray> {
    private val length: Int = coefs.size
    private val reDelayLine = FloatArray(length)
    private val imDelayLine = FloatArray(length)
    private var count = 0

    override fun next(): FloatArray {
        val nextArray = input.next()
        val result = FloatArray(nextArray.size)
        val iterator = nextArray.iterator()
        var resultCounter = 0
        while (iterator.hasNext()) {
            reDelayLine[count] = iterator.next()
            imDelayLine[count] = if(iterator.hasNext()) iterator.next() else break
            var index = count
            for (i in 0 until length) {
                result[resultCounter] += coefs[i] * reDelayLine[index]
                result[resultCounter + 1] += coefs[i] * imDelayLine[index]
                index--
                if (index < 0) index = length - 1
            }
            if (++count >= length) count = 0
            resultCounter += 2

        }
        return result
    }

    override fun hasNext() = input.hasNext()
}